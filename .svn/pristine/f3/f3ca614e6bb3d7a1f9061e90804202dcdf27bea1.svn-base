package com.greencycle.my.game.web;

import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import com.greencycle.my.game.service.DamainfoService;
import com.greencycle.my.game.vo.DamainfoVO;
import com.greencycle.my.member.vo.MemberVO;

@Controller
public class DamainfoController {
    @Autowired
    DamainfoService damainfoService;

    @RequestMapping("/select")
    public String select(MemberVO vo, Integer damainfoNo, Model model, HttpSession session) throws Exception {
        MemberVO sessionLogin = (MemberVO) session.getAttribute("login");

        if (sessionLogin != null) {
            String userId = sessionLogin.getUserId();
            DamainfoVO damainfo = damainfoService.getDamainfo(userId);

            if (damainfoNo != null) {
                DamainfoVO dama = damainfoService.damainfoStatus(damainfoNo);
                model.addAttribute("dama", dama);
            }

            if (damainfo != null) {
                session.setAttribute("damainfoChar", damainfo.getDamainfoChar());
                model.addAttribute("damainfo", damainfo);
                return "game/gameMain";
            } else {
                return "game/characterSelect";
            }
        } else {
            return "game/characterSelect";
        }
    }

    @RequestMapping("/gameMain")
    public String create(@RequestParam("selectedCharacter") String selectedCharacter, HttpSession session) throws Exception {
        MemberVO vo = (MemberVO) session.getAttribute("login");

        if (vo == null) {
            throw new NullPointerException("User is not logged in.");
        }
        if (selectedCharacter == null || selectedCharacter.isEmpty()) {
            throw new NullPointerException("Selected character is null or empty.");
        }

        DamainfoVO dama = new DamainfoVO();
        dama.setUserId(vo.getUserId());
        dama.setDamainfoChar(selectedCharacter);

        damainfoService.damainfoWrite(dama);
        session.setAttribute("damainfoChar", selectedCharacter);
        return "game/gameMain";
    }

    @RequestMapping("/recycling")
    public String recycling(HttpSession session, Model model) {
        MemberVO sessionLogin = (MemberVO) session.getAttribute("login");

        if (sessionLogin != null) {
            String userId = sessionLogin.getUserId();

            DamainfoVO damainfo = damainfoService.getDamainfo(userId);
            model.addAttribute("damainfo", damainfo);
        } else {
            return "redirect:/login";
        }

        return "game/recycling";
    }

    @PostMapping("/updateStats")
    @ResponseBody
    public ResponseEntity<String> updateStats(HttpSession session,
                                              @RequestParam("hp") int hp,
                                              @RequestParam("happiness") int happiness,
                                              @RequestParam("clean") int clean) {
        MemberVO sessionLogin = (MemberVO) session.getAttribute("login");

        if (sessionLogin == null) {
            return new ResponseEntity<>("User not logged in", HttpStatus.UNAUTHORIZED);
        }

        String userId = sessionLogin.getUserId();
        DamainfoVO damainfo = damainfoService.getDamainfo(userId);

        if (damainfo == null) {
            return new ResponseEntity<>("Damainfo not found", HttpStatus.NOT_FOUND);
        }

        damainfo.setDamainfoHp(hp);
        damainfo.setDamainfoHappniess(happiness);
        damainfo.setDamainfoClean(clean);

        try {
            damainfoService.updateDamainfo(damainfo);
            return new ResponseEntity<>("Stats updated", HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>("Error updating stats", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

  
        @PostMapping("/purchaseItem")
        @ResponseBody
        public ResponseEntity<String> purchaseItem(HttpSession session, @RequestParam("item") String item,
                                                   @RequestParam("price") int price, @RequestParam("hearts") int hearts) {
            MemberVO sessionLogin = (MemberVO) session.getAttribute("login");

            if (sessionLogin == null) {
                return new ResponseEntity<>("User not logged in", HttpStatus.UNAUTHORIZED);
            }

            String userId = sessionLogin.getUserId();
            DamainfoVO damainfo = damainfoService.getDamainfo(userId);

            if (damainfo == null) {
                return new ResponseEntity<>("Damainfo not found", HttpStatus.NOT_FOUND);
            }

            int currentPoints = Integer.parseInt(damainfo.getUserPoint().replace(",", ""));
            int updatedPoints = currentPoints - price;

            if (updatedPoints < 0) {
                return new ResponseEntity<>("Not enough points", HttpStatus.BAD_REQUEST);
            }

            int hp = 0;
            int happiness = 0;
            int clean = 0;

            if (item.contains("Food")) {
                hp = hearts;
            } else if (item.contains("Fun")) {
                happiness = hearts;
            } else if (item.contains("Medicine")) {
                clean = hearts;
            }

            try {
                damainfoService.decrementUserPoints(userId, price);
                damainfoService.incrementDamainfo(userId, hp, happiness, clean);
                return new ResponseEntity<>("Item purchased successfully", HttpStatus.OK);
            } catch (Exception e) {
                return new ResponseEntity<>("Error purchasing item", HttpStatus.INTERNAL_SERVER_ERROR);
            }
        }
}
